
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_crops.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_crops.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_crops.py:


Crop images with ImageContainer
-------------------------------

This example shows how crop images from :class:`squidpy.im.ImageContainer`.

Specifically, it shows how to use:

    - :meth:`squidpy.im.ImageContainer.crop_corner()`
    - :meth:`squidpy.im.ImageContainer.crop_center()`

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_image_container.py` for general usage of
    :class:`squidpy.im.ImageContainer`.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

.. code-block:: default


    import squidpy as sq

    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Let's load the fluorescence Visium image.

.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: default

    img = sq.datasets.visium_fluo_image_crop()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/303M [00:00<?, ?B/s]      0%|          | 24.0k/303M [00:00<29:20, 180kB/s]      0%|          | 56.0k/303M [00:00<24:30, 216kB/s]      0%|          | 120k/303M [00:00<15:41, 337kB/s]       0%|          | 256k/303M [00:00<08:42, 607kB/s]      0%|          | 528k/303M [00:00<04:41, 1.12MB/s]      0%|          | 1.06M/303M [00:00<02:25, 2.17MB/s]      1%|          | 2.16M/303M [00:00<01:14, 4.21MB/s]      1%|1         | 4.34M/303M [00:01<00:38, 8.22MB/s]      2%|2         | 7.12M/303M [00:01<00:25, 12.3MB/s]      3%|3         | 10.0M/303M [00:01<00:20, 15.3MB/s]      4%|4         | 12.9M/303M [00:01<00:17, 17.4MB/s]      5%|5         | 15.7M/303M [00:01<00:16, 18.6MB/s]      6%|6         | 18.6M/303M [00:01<00:15, 19.6MB/s]      7%|7         | 21.5M/303M [00:01<00:14, 20.4MB/s]      8%|8         | 24.4M/303M [00:02<00:13, 21.0MB/s]      9%|9         | 27.3M/303M [00:02<00:13, 21.4MB/s]     10%|#         | 30.3M/303M [00:02<00:13, 21.8MB/s]     11%|#         | 33.2M/303M [00:02<00:12, 21.9MB/s]     12%|#1        | 36.1M/303M [00:02<00:12, 22.0MB/s]     13%|#2        | 39.1M/303M [00:02<00:12, 22.2MB/s]     14%|#3        | 42.0M/303M [00:02<00:12, 22.3MB/s]     15%|#4        | 44.9M/303M [00:03<00:12, 22.3MB/s]     16%|#5        | 47.8M/303M [00:03<00:12, 22.2MB/s]     17%|#6        | 50.7M/303M [00:03<00:11, 22.3MB/s]     18%|#7        | 53.6M/303M [00:03<00:11, 22.3MB/s]     19%|#8        | 56.5M/303M [00:03<00:11, 22.3MB/s]     20%|#9        | 59.5M/303M [00:03<00:11, 22.4MB/s]     21%|##        | 62.2M/303M [00:03<00:11, 21.8MB/s]     22%|##1       | 65.2M/303M [00:03<00:11, 22.1MB/s]     23%|##2       | 68.1M/303M [00:04<00:11, 22.3MB/s]     23%|##3       | 70.8M/303M [00:04<00:11, 21.7MB/s]     24%|##4       | 73.8M/303M [00:04<00:10, 22.0MB/s]     25%|##5       | 76.7M/303M [00:04<00:10, 22.2MB/s]     26%|##6       | 79.4M/303M [00:04<00:10, 21.7MB/s]     27%|##7       | 82.3M/303M [00:04<00:10, 21.9MB/s]     28%|##8       | 85.3M/303M [00:04<00:10, 22.1MB/s]     29%|##9       | 88.0M/303M [00:05<00:10, 21.6MB/s]     30%|###       | 91.0M/303M [00:05<00:10, 21.9MB/s]     31%|###       | 93.8M/303M [00:05<00:09, 21.9MB/s]     32%|###1      | 96.6M/303M [00:05<00:09, 21.8MB/s]     33%|###2      | 99.6M/303M [00:05<00:09, 22.1MB/s]     34%|###3      | 103M/303M [00:05<00:09, 22.3MB/s]      35%|###4      | 106M/303M [00:05<00:09, 22.4MB/s]     36%|###5      | 108M/303M [00:06<00:09, 21.8MB/s]     37%|###6      | 111M/303M [00:06<00:09, 21.8MB/s]     38%|###7      | 114M/303M [00:06<00:08, 22.0MB/s]     39%|###8      | 117M/303M [00:06<00:08, 22.1MB/s]     40%|###9      | 120M/303M [00:06<00:08, 22.3MB/s]     41%|####      | 123M/303M [00:06<00:08, 22.5MB/s]     42%|####1     | 126M/303M [00:06<00:08, 22.3MB/s]     43%|####2     | 129M/303M [00:06<00:08, 22.3MB/s]     43%|####3     | 132M/303M [00:07<00:08, 22.3MB/s]     44%|####4     | 134M/303M [00:07<00:07, 22.1MB/s]     45%|####5     | 137M/303M [00:07<00:07, 22.2MB/s]     46%|####6     | 140M/303M [00:07<00:07, 22.2MB/s]     47%|####7     | 143M/303M [00:07<00:07, 22.3MB/s]     48%|####8     | 146M/303M [00:07<00:07, 22.4MB/s]     49%|####9     | 149M/303M [00:07<00:06, 23.8MB/s]     50%|#####     | 152M/303M [00:08<00:06, 23.4MB/s]     51%|#####1    | 155M/303M [00:08<00:07, 21.1MB/s]     52%|#####2    | 158M/303M [00:08<00:07, 21.4MB/s]     53%|#####3    | 160M/303M [00:08<00:06, 21.7MB/s]     54%|#####3    | 163M/303M [00:08<00:06, 21.9MB/s]     55%|#####4    | 166M/303M [00:08<00:06, 22.0MB/s]     56%|#####5    | 169M/303M [00:08<00:06, 22.2MB/s]     57%|#####6    | 172M/303M [00:09<00:06, 22.2MB/s]     58%|#####7    | 175M/303M [00:09<00:06, 22.1MB/s]     59%|#####8    | 178M/303M [00:09<00:05, 22.2MB/s]     60%|#####9    | 181M/303M [00:09<00:05, 22.3MB/s]     61%|######    | 184M/303M [00:09<00:05, 22.5MB/s]     62%|######1   | 187M/303M [00:09<00:05, 22.5MB/s]     63%|######2   | 190M/303M [00:09<00:05, 22.4MB/s]     64%|######3   | 192M/303M [00:09<00:05, 21.8MB/s]     64%|######4   | 195M/303M [00:10<00:05, 22.0MB/s]     65%|######5   | 198M/303M [00:10<00:04, 23.9MB/s]     66%|######6   | 200M/303M [00:10<00:04, 23.8MB/s]     67%|######6   | 202M/303M [00:10<00:04, 21.6MB/s]     67%|######7   | 204M/303M [00:10<00:04, 21.8MB/s]     68%|######8   | 207M/303M [00:10<00:04, 21.4MB/s]     69%|######9   | 210M/303M [00:10<00:04, 21.7MB/s]     70%|#######   | 213M/303M [00:10<00:04, 21.9MB/s]     71%|#######1  | 216M/303M [00:11<00:04, 22.1MB/s]     72%|#######2  | 218M/303M [00:11<00:03, 22.1MB/s]     73%|#######3  | 221M/303M [00:11<00:03, 22.2MB/s]     74%|#######4  | 224M/303M [00:11<00:03, 23.1MB/s]     75%|#######5  | 227M/303M [00:11<00:03, 22.7MB/s]     76%|#######5  | 230M/303M [00:11<00:03, 22.2MB/s]     77%|#######6  | 233M/303M [00:11<00:03, 21.9MB/s]     78%|#######7  | 236M/303M [00:12<00:03, 22.0MB/s]     79%|#######8  | 238M/303M [00:12<00:03, 22.1MB/s]     80%|#######9  | 241M/303M [00:12<00:02, 23.1MB/s]     81%|########  | 244M/303M [00:12<00:02, 23.7MB/s]     81%|########1 | 245M/303M [00:12<00:02, 20.8MB/s]     82%|########1 | 248M/303M [00:12<00:02, 21.4MB/s]     83%|########2 | 250M/303M [00:12<00:02, 22.4MB/s]     83%|########3 | 253M/303M [00:12<00:02, 22.9MB/s]     84%|########4 | 254M/303M [00:12<00:02, 21.8MB/s]     85%|########4 | 257M/303M [00:13<00:02, 20.4MB/s]     86%|########5 | 259M/303M [00:13<00:02, 22.4MB/s]     86%|########6 | 262M/303M [00:13<00:01, 22.6MB/s]     87%|########7 | 264M/303M [00:13<00:01, 23.9MB/s]     88%|########7 | 265M/303M [00:13<00:01, 20.0MB/s]     89%|########8 | 268M/303M [00:13<00:01, 21.4MB/s]     89%|########9 | 270M/303M [00:13<00:01, 21.8MB/s]     90%|######### | 273M/303M [00:13<00:01, 23.6MB/s]     91%|#########1| 275M/303M [00:13<00:01, 22.9MB/s]     92%|#########1| 277M/303M [00:14<00:01, 20.7MB/s]     92%|#########2| 280M/303M [00:14<00:01, 21.9MB/s]     93%|#########3| 282M/303M [00:14<00:00, 22.6MB/s]     94%|#########4| 285M/303M [00:14<00:00, 23.9MB/s]     95%|#########4| 287M/303M [00:14<00:00, 22.7MB/s]     95%|#########5| 289M/303M [00:14<00:00, 20.7MB/s]     96%|#########6| 291M/303M [00:14<00:00, 21.7MB/s]     97%|#########7| 294M/303M [00:14<00:00, 22.1MB/s]     98%|#########8| 297M/303M [00:14<00:00, 24.0MB/s]     99%|#########8| 299M/303M [00:14<00:00, 22.7MB/s]     99%|#########9| 300M/303M [00:15<00:00, 20.8MB/s]    100%|##########| 303M/303M [00:15<00:00, 21.9MB/s]    100%|##########| 303M/303M [00:15<00:00, 20.9MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 28-34

Extracting single crops:
Crops need to be sized and located. We distinguish crops located based on a
corner coordinate of the crop and crops located based on the center coordinate
of the crop.
You can specify the crop coordinates in pixels (as ``int``) or in percentage of total image size (as ``float``).
In addition, you can specify a scaling factor for the crop.

.. GENERATED FROM PYTHON SOURCE LINES 34-42

.. code-block:: default

    crop_corner = img.crop_corner(1000, 1000, size=800)

    crop_center = img.crop_center(1400, 1400, radius=400)

    fig, axes = plt.subplots(1, 2)
    crop_corner.show(ax=axes[0])
    crop_center.show(ax=axes[1])




.. image-sg:: /auto_examples/image/images/sphx_glr_compute_crops_001.png
   :alt: image, image
   :srcset: /auto_examples/image/images/sphx_glr_compute_crops_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 43-44

The result of the cropping functions is another ImageContainer.

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: default

    crop_corner






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    ImageContainer object with 1 layer:<p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>image</strong>: <em>y</em> (800), <em>x</em> (800), <em>z</em> (1), <em>channels</em> (3)</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 47-48

You can subset the associated ``adata`` to the cropped image using :meth:`squidpy.im.ImageContainer.subset`:

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default

    adata = sq.datasets.visium_fluo_adata_crop()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/65.5M [00:00<?, ?B/s]      0%|          | 24.0k/65.5M [00:00<06:15, 183kB/s]      0%|          | 56.0k/65.5M [00:00<05:16, 217kB/s]      0%|          | 104k/65.5M [00:00<04:02, 282kB/s]       0%|          | 264k/65.5M [00:00<01:45, 646kB/s]      1%|          | 536k/65.5M [00:00<00:59, 1.15MB/s]      2%|1         | 1.02M/65.5M [00:00<00:33, 2.05MB/s]      3%|3         | 2.07M/65.5M [00:00<00:16, 4.03MB/s]      6%|6         | 4.16M/65.5M [00:01<00:08, 7.88MB/s]     10%|#         | 6.79M/65.5M [00:01<00:05, 11.7MB/s]     15%|#4        | 9.62M/65.5M [00:01<00:03, 14.8MB/s]     19%|#9        | 12.6M/65.5M [00:01<00:03, 17.1MB/s]     24%|##3       | 15.4M/65.5M [00:01<00:02, 18.6MB/s]     28%|##7       | 18.1M/65.5M [00:01<00:02, 19.1MB/s]     32%|###2      | 21.0M/65.5M [00:01<00:02, 20.1MB/s]     37%|###6      | 24.0M/65.5M [00:02<00:02, 20.9MB/s]     41%|####      | 26.8M/65.5M [00:02<00:01, 21.0MB/s]     45%|####5     | 29.7M/65.5M [00:02<00:01, 21.4MB/s]     49%|####9     | 32.4M/65.5M [00:02<00:01, 21.1MB/s]     54%|#####3    | 35.3M/65.5M [00:02<00:01, 21.5MB/s]     58%|#####8    | 38.2M/65.5M [00:02<00:01, 21.7MB/s]     62%|######2   | 40.8M/65.5M [00:02<00:01, 21.2MB/s]     67%|######6   | 43.6M/65.5M [00:03<00:01, 21.3MB/s]     71%|#######1  | 46.6M/65.5M [00:03<00:00, 21.8MB/s]     76%|#######5  | 49.5M/65.5M [00:03<00:00, 22.1MB/s]     80%|########  | 52.4M/65.5M [00:03<00:00, 22.2MB/s]     84%|########4 | 55.1M/65.5M [00:03<00:00, 21.6MB/s]     88%|########8 | 57.9M/65.5M [00:03<00:00, 21.7MB/s]     93%|#########2| 60.8M/65.5M [00:03<00:00, 21.8MB/s]     97%|#########7| 63.8M/65.5M [00:03<00:00, 22.2MB/s]    100%|##########| 65.5M/65.5M [00:04<00:00, 17.1MB/s]

    AnnData object with n_obs × n_vars = 704 × 16562
        obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_MT', 'log1p_total_counts_MT', 'pct_counts_MT', 'n_counts', 'leiden', 'cluster'
        var: 'gene_ids', 'feature_types', 'genome', 'MT', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'n_cells', 'highly_variable', 'highly_variable_rank', 'means', 'variances', 'variances_norm'
        uns: 'cluster_colors', 'hvg', 'leiden', 'leiden_colors', 'neighbors', 'pca', 'spatial', 'umap'
        obsm: 'X_pca', 'X_umap', 'spatial'
        varm: 'PCs'
        obsp: 'connectivities', 'distances'



.. GENERATED FROM PYTHON SOURCE LINES 52-53

Note the number of observations in ``adata`` before and after subsetting.

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default

    adata_crop = crop_corner.subset(adata)
    adata_crop





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    View of AnnData object with n_obs × n_vars = 7 × 16562
        obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_MT', 'log1p_total_counts_MT', 'pct_counts_MT', 'n_counts', 'leiden', 'cluster'
        var: 'gene_ids', 'feature_types', 'genome', 'MT', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'n_cells', 'highly_variable', 'highly_variable_rank', 'means', 'variances', 'variances_norm'
        uns: 'cluster_colors', 'hvg', 'leiden', 'leiden_colors', 'neighbors', 'pca', 'spatial', 'umap'
        obsm: 'X_pca', 'X_umap', 'spatial'
        varm: 'PCs'
        obsp: 'connectivities', 'distances'



.. GENERATED FROM PYTHON SOURCE LINES 57-62

Visualize the result in Napari:

.. code-block:: python

       crop_corner.interactive(adata_crop)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  41.412 seconds)

**Estimated memory usage:**  246 MB


.. _sphx_glr_download_auto_examples_image_compute_crops.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_crops.py <compute_crops.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_crops.ipynb <compute_crops.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
