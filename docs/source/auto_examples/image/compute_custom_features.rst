
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_custom_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_custom_features.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_custom_features.py:


Extract custom features
-----------------------

This example shows how to extract features from the tissue image using a custom function.

The custom feature calculation function can be any python function that takes an image as input, and
returns a list of features.
Here, we show a simple example by defining a function to calculate the mean of the images.

Custom features are calculated by using ``features = 'custom'``, which calls
:func:`squidpy.im.ImageContainer.features_custom`.
In addition to ``feature_name`` and ``channels`` we can specify the following ``features_kwargs``:

    - ``func`` - custom feature extraction function.
    - ``additional_layers`` - names of image layers that should be passed to ``func`` together with ``layer``.
    - additional keyword arguments for ``func``.

.. seealso::

    See :ref:`sphx_glr_auto_examples_image_compute_features.py` for general usage of
    :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default


    import squidpy as sq








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Let's load the H&E Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 30-36

.. code-block:: default


    # get spatial dataset including high-resolution tissue image
    img = sq.datasets.visium_hne_image_crop()
    adata = sq.datasets.visium_hne_adata_crop()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/89.9M [00:00<?, ?B/s]      0%|          | 24.0k/89.9M [00:00<08:37, 182kB/s]      0%|          | 56.0k/89.9M [00:00<07:14, 217kB/s]      0%|          | 104k/89.9M [00:00<05:33, 282kB/s]       0%|          | 264k/89.9M [00:00<02:25, 646kB/s]      1%|          | 536k/89.9M [00:00<01:21, 1.15MB/s]      1%|1         | 1.07M/89.9M [00:00<00:42, 2.19MB/s]      2%|2         | 2.16M/89.9M [00:00<00:21, 4.20MB/s]      5%|4         | 4.33M/89.9M [00:01<00:10, 8.17MB/s]      8%|7         | 6.94M/89.9M [00:01<00:07, 11.9MB/s]     11%|#         | 9.56M/89.9M [00:01<00:05, 14.5MB/s]     14%|#3        | 12.4M/89.9M [00:01<00:04, 16.8MB/s]     17%|#7        | 15.3M/89.9M [00:01<00:04, 18.5MB/s]     20%|##        | 18.2M/89.9M [00:01<00:03, 19.7MB/s]     24%|##3       | 21.2M/89.9M [00:01<00:03, 20.5MB/s]     27%|##6       | 24.0M/89.9M [00:02<00:03, 21.0MB/s]     30%|##9       | 26.8M/89.9M [00:02<00:03, 20.9MB/s]     33%|###3      | 29.8M/89.9M [00:02<00:02, 21.5MB/s]     36%|###6      | 32.8M/89.9M [00:02<00:02, 21.9MB/s]     40%|###9      | 35.7M/89.9M [00:02<00:02, 22.1MB/s]     43%|####3     | 38.7M/89.9M [00:02<00:02, 22.3MB/s]     46%|####6     | 41.5M/89.9M [00:02<00:02, 22.1MB/s]     49%|####9     | 44.3M/89.9M [00:03<00:02, 22.1MB/s]     53%|#####2    | 47.2M/89.9M [00:03<00:02, 22.1MB/s]     56%|#####5    | 50.1M/89.9M [00:03<00:01, 22.1MB/s]     59%|#####8    | 52.8M/89.9M [00:03<00:01, 21.7MB/s]     62%|######1   | 55.6M/89.9M [00:03<00:01, 21.6MB/s]     65%|######5   | 58.6M/89.9M [00:03<00:01, 21.8MB/s]     68%|######8   | 61.5M/89.9M [00:03<00:01, 22.0MB/s]     72%|#######1  | 64.5M/89.9M [00:03<00:01, 22.3MB/s]     75%|#######4  | 67.4M/89.9M [00:04<00:00, 23.6MB/s]     78%|#######7  | 69.9M/89.9M [00:04<00:00, 24.2MB/s]     80%|#######9  | 71.8M/89.9M [00:04<00:00, 22.6MB/s]     82%|########2 | 73.8M/89.9M [00:04<00:00, 22.1MB/s]     84%|########4 | 75.9M/89.9M [00:04<00:00, 22.0MB/s]     88%|########7 | 78.7M/89.9M [00:04<00:00, 23.3MB/s]     90%|########9 | 80.7M/89.9M [00:04<00:00, 22.7MB/s]     92%|#########1| 82.5M/89.9M [00:04<00:00, 20.8MB/s]     94%|#########4| 84.9M/89.9M [00:04<00:00, 21.4MB/s]     97%|#########7| 87.5M/89.9M [00:05<00:00, 22.6MB/s]    100%|##########| 89.9M/89.9M [00:05<00:00, 18.4MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 37-38

Define a custom feature extraction function.

.. GENERATED FROM PYTHON SOURCE LINES 38-45

.. code-block:: default

    def mean_fn(arr):
        """Compute mean of arr."""
        import numpy as np

        return np.mean(arr)









.. GENERATED FROM PYTHON SOURCE LINES 46-47

Now we can extract features using `mean_fn` by providing it within ``features_kwargs``.

.. GENERATED FROM PYTHON SOURCE LINES 47-56

.. code-block:: default

    sq.im.calculate_image_features(
        adata,
        img,
        features="custom",
        features_kwargs={"custom": {"func": mean_fn}},
        key_added="custom_features",
        show_progress_bar=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 57-58

The result is stored in ``adata.obsm['custom_features']``.

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: default

    adata.obsm["custom_features"].head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mean_fn_0</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>AAAGACCCAAGTCGCG-1</th>
          <td>101.868998</td>
        </tr>
        <tr>
          <th>AAAGGGATGTAGCAAG-1</th>
          <td>102.959180</td>
        </tr>
        <tr>
          <th>AAAGTCACTGATGTAA-1</th>
          <td>107.924715</td>
        </tr>
        <tr>
          <th>AAATGGCATGTCTTGT-1</th>
          <td>97.444851</td>
        </tr>
        <tr>
          <th>AAATGGTCAATGTGCC-1</th>
          <td>102.854690</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Use :func:`squidpy.pl.extract` to plot the histogram features on the tissue image or have a look at
`our interactive visualization tutorial <../../tutorials/tutorial_napari.ipynb>`_ to learn
how to use our interactive :mod:`napari` plugin.

.. GENERATED FROM PYTHON SOURCE LINES 64-67

.. code-block:: default

    sq.pl.spatial_scatter(sq.pl.extract(adata, "custom_features"), color=[None, "mean_fn_0"], img_cmap="gray")





.. image-sg:: /auto_examples/image/images/sphx_glr_compute_custom_features_001.png
   :alt: mean_fn_0
   :srcset: /auto_examples/image/images/sphx_glr_compute_custom_features_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-73

You can also pass more than one image layer to the custom feature extraction function.
For this, specify the necessary additional layer names using ``additional_layers`` in ``features_kwargs``.
The specified image layers will be passed to the custom feature extraction function.

Here, we show this behavior by defining a feature extraction function that sums two image layers:

.. GENERATED FROM PYTHON SOURCE LINES 73-91

.. code-block:: default

    def sum_fn(arr, extra_layer):
        """Compute sum of two image layers."""
        import numpy as np

        return np.sum(arr + extra_layer)


    img.add_img(img["image"].values, layer="extra_layer")

    sq.im.calculate_image_features(
        adata,
        img,
        layer="image",
        features="custom",
        features_kwargs={"custom": {"func": sum_fn, "additional_layers": ["extra_layer"]}},
        key_added="custom_features",
        show_progress_bar=False,
    )








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  50.886 seconds)

**Estimated memory usage:**  263 MB


.. _sphx_glr_download_auto_examples_image_compute_custom_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_custom_features.py <compute_custom_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_custom_features.ipynb <compute_custom_features.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
