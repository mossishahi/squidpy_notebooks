
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_process_hires.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_process_hires.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_process_hires.py:


Process a high-resolution image
-------------------------------

This example shows how to use :func:`squidpy.im.process` with tiling.

The function can be applied to any method (e.g., smoothing, conversion to grayscale)
or ``layer`` of a high-resolution image layer of :class:`squidpy.im.ImageContainer`.

By default, :func:`squidpy.im.process` processes the entire input image at once.
In the case of high-resolution tissue slides however, the images might be too big to fit in memory
and cannot be processed at once.
In that case you can use the argument ``chunks`` to tile the image in crops of shape ``chunks``,
process each crop, and re-assemble the resulting image.
Note that you can also use :func:`squidpy.im.segment` in this manner.

Note that depending on the processing function used, there might be border effects occurring at the edges
of the crops.
Since Squidpy is backed by :mod:`dask`, and internally chunking is done using :func:`dask.array.map_overlap`,
dealing with these border effects is easy.
Just specify the ``depth`` and ``boundary`` arguments in the ``apply_kwargs``
upon the call to :func:`squidpy.im.process`.
For more information, please refer to the documentation of :func:`dask.array.map_overlap`.

For the build in processing functions, `gray` and `smooth`, the border effects are already automatically
taken care of, so it is not necessary to specify ``depth`` and ``boundary``.
For :func:`squidpy.im.segment`, the default ``depth`` is 30, which already takes care of most severe
border effects.

.. seealso::

    - :ref:`sphx_glr_auto_examples_image_compute_smooth.py`.
    - :ref:`sphx_glr_auto_examples_image_compute_gray.py`.
    - :ref:`sphx_glr_auto_examples_image_compute_segment_fluo.py`.

.. GENERATED FROM PYTHON SOURCE LINES 37-45

.. code-block:: default


    import squidpy as sq

    from scipy.ndimage import gaussian_filter
    import numpy as np

    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 46-48

Built-in processing functions
+++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default


    # load the H&E stained tissue image
    img = sq.datasets.visium_hne_image()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/380M [00:00<?, ?B/s]      0%|          | 16.0k/380M [00:00<54:10, 123kB/s]      0%|          | 56.0k/380M [00:00<29:04, 228kB/s]      0%|          | 120k/380M [00:00<19:17, 344kB/s]       0%|          | 256k/380M [00:00<10:50, 612kB/s]      0%|          | 544k/380M [00:00<05:38, 1.17MB/s]      0%|          | 1.12M/380M [00:00<02:51, 2.31MB/s]      1%|          | 2.24M/380M [00:00<01:30, 4.39MB/s]      1%|1         | 4.51M/380M [00:01<00:46, 8.54MB/s]      2%|1         | 7.37M/380M [00:01<00:30, 12.8MB/s]      3%|2         | 10.2M/380M [00:01<00:24, 15.6MB/s]      3%|3         | 13.1M/380M [00:01<00:21, 17.6MB/s]      4%|4         | 15.9M/380M [00:01<00:20, 18.9MB/s]      5%|4         | 18.8M/380M [00:01<00:19, 19.8MB/s]      6%|5         | 21.7M/380M [00:01<00:18, 20.5MB/s]      6%|6         | 24.5M/380M [00:02<00:17, 20.9MB/s]      7%|7         | 27.4M/380M [00:02<00:17, 21.2MB/s]      8%|7         | 30.3M/380M [00:02<00:17, 21.5MB/s]      9%|8         | 33.1M/380M [00:02<00:16, 21.7MB/s]     10%|9         | 36.1M/380M [00:02<00:16, 22.0MB/s]     10%|#         | 38.8M/380M [00:02<00:16, 21.6MB/s]     11%|#         | 41.7M/380M [00:02<00:16, 21.8MB/s]     12%|#1        | 44.6M/380M [00:02<00:16, 21.9MB/s]     12%|#2        | 47.3M/380M [00:03<00:16, 21.6MB/s]     13%|#3        | 50.3M/380M [00:03<00:15, 22.0MB/s]     14%|#4        | 53.2M/380M [00:03<00:15, 22.1MB/s]     15%|#4        | 56.1M/380M [00:03<00:15, 22.2MB/s]     15%|#5        | 58.8M/380M [00:03<00:15, 21.7MB/s]     16%|#6        | 61.6M/380M [00:03<00:15, 21.6MB/s]     17%|#6        | 64.5M/380M [00:03<00:15, 22.0MB/s]     18%|#7        | 67.5M/380M [00:04<00:14, 22.2MB/s]     19%|#8        | 70.5M/380M [00:04<00:14, 22.4MB/s]     19%|#9        | 73.4M/380M [00:04<00:14, 22.5MB/s]     20%|##        | 76.3M/380M [00:04<00:14, 22.5MB/s]     21%|##        | 79.1M/380M [00:04<00:14, 22.2MB/s]     22%|##1       | 82.0M/380M [00:04<00:14, 22.2MB/s]     22%|##2       | 85.0M/380M [00:04<00:13, 22.3MB/s]     23%|##3       | 87.9M/380M [00:05<00:13, 22.3MB/s]     24%|##3       | 90.8M/380M [00:05<00:13, 23.3MB/s]     25%|##4       | 93.7M/380M [00:05<00:13, 23.0MB/s]     25%|##5       | 96.6M/380M [00:05<00:13, 22.7MB/s]     26%|##6       | 99.3M/380M [00:05<00:13, 22.1MB/s]     27%|##6       | 102M/380M [00:05<00:13, 22.2MB/s]      28%|##7       | 105M/380M [00:05<00:13, 22.2MB/s]     28%|##8       | 108M/380M [00:05<00:12, 23.3MB/s]     29%|##8       | 110M/380M [00:06<00:13, 21.3MB/s]     29%|##9       | 112M/380M [00:06<00:12, 22.3MB/s]     30%|###       | 114M/380M [00:06<00:12, 21.7MB/s]     31%|###       | 117M/380M [00:06<00:11, 23.5MB/s]     31%|###1      | 118M/380M [00:06<00:12, 21.1MB/s]     32%|###1      | 121M/380M [00:06<00:12, 22.0MB/s]     32%|###2      | 123M/380M [00:06<00:11, 22.5MB/s]     33%|###2      | 125M/380M [00:06<00:11, 22.7MB/s]     33%|###3      | 127M/380M [00:06<00:12, 21.1MB/s]     34%|###4      | 129M/380M [00:06<00:11, 22.1MB/s]     35%|###4      | 132M/380M [00:07<00:11, 22.9MB/s]     35%|###5      | 134M/380M [00:07<00:11, 22.9MB/s]     36%|###5      | 136M/380M [00:07<00:11, 21.6MB/s]     36%|###6      | 138M/380M [00:07<00:11, 21.9MB/s]     37%|###6      | 140M/380M [00:07<00:11, 22.0MB/s]     38%|###7      | 143M/380M [00:07<00:11, 22.4MB/s]     38%|###8      | 146M/380M [00:07<00:10, 23.6MB/s]     39%|###8      | 148M/380M [00:07<00:10, 22.6MB/s]     39%|###9      | 150M/380M [00:07<00:11, 20.2MB/s]     40%|####      | 153M/380M [00:08<00:10, 22.3MB/s]     41%|####      | 155M/380M [00:08<00:11, 21.4MB/s]     41%|####1     | 158M/380M [00:08<00:10, 21.8MB/s]     42%|####2     | 161M/380M [00:08<00:10, 22.0MB/s]     43%|####3     | 164M/380M [00:08<00:10, 22.3MB/s]     44%|####3     | 166M/380M [00:08<00:10, 21.5MB/s]     44%|####4     | 169M/380M [00:08<00:10, 21.9MB/s]     45%|####5     | 172M/380M [00:09<00:09, 22.0MB/s]     46%|####6     | 175M/380M [00:09<00:09, 22.0MB/s]     47%|####6     | 178M/380M [00:09<00:09, 22.0MB/s]     48%|####7     | 181M/380M [00:09<00:09, 22.2MB/s]     48%|####8     | 183M/380M [00:09<00:09, 21.8MB/s]     49%|####9     | 186M/380M [00:09<00:09, 21.8MB/s]     50%|####9     | 189M/380M [00:09<00:09, 21.9MB/s]     51%|#####     | 192M/380M [00:09<00:08, 22.2MB/s]     51%|#####1    | 195M/380M [00:10<00:08, 23.7MB/s]     52%|#####1    | 197M/380M [00:10<00:08, 22.6MB/s]     52%|#####2    | 199M/380M [00:10<00:08, 21.4MB/s]     53%|#####2    | 201M/380M [00:10<00:08, 21.3MB/s]     54%|#####3    | 204M/380M [00:10<00:08, 23.0MB/s]     54%|#####4    | 206M/380M [00:10<00:07, 24.1MB/s]     55%|#####4    | 208M/380M [00:10<00:07, 22.8MB/s]     55%|#####5    | 210M/380M [00:10<00:08, 21.9MB/s]     56%|#####5    | 213M/380M [00:10<00:07, 22.6MB/s]     57%|#####6    | 215M/380M [00:11<00:07, 23.0MB/s]     57%|#####6    | 216M/380M [00:11<00:08, 20.9MB/s]     58%|#####7    | 219M/380M [00:11<00:07, 22.5MB/s]     58%|#####8    | 221M/380M [00:11<00:07, 21.5MB/s]     59%|#####8    | 224M/380M [00:11<00:07, 23.3MB/s]     59%|#####9    | 225M/380M [00:11<00:07, 21.5MB/s]     60%|#####9    | 227M/380M [00:11<00:07, 21.3MB/s]     60%|######    | 230M/380M [00:11<00:07, 22.1MB/s]     61%|######1   | 232M/380M [00:11<00:06, 23.2MB/s]     62%|######1   | 234M/380M [00:11<00:07, 21.8MB/s]     62%|######2   | 236M/380M [00:12<00:07, 21.3MB/s]     63%|######2   | 239M/380M [00:12<00:06, 22.5MB/s]     63%|######3   | 241M/380M [00:12<00:06, 21.5MB/s]     64%|######4   | 244M/380M [00:12<00:06, 23.5MB/s]     65%|######4   | 246M/380M [00:12<00:06, 21.8MB/s]     65%|######5   | 248M/380M [00:12<00:06, 20.7MB/s]     66%|######5   | 250M/380M [00:12<00:06, 21.0MB/s]     66%|######6   | 253M/380M [00:12<00:06, 21.1MB/s]     67%|######7   | 256M/380M [00:12<00:06, 21.6MB/s]     68%|######8   | 258M/380M [00:13<00:05, 21.7MB/s]     69%|######8   | 261M/380M [00:13<00:05, 21.8MB/s]     69%|######9   | 264M/380M [00:13<00:05, 21.3MB/s]     70%|#######   | 267M/380M [00:13<00:05, 21.7MB/s]     71%|#######   | 270M/380M [00:13<00:05, 21.8MB/s]     72%|#######1  | 272M/380M [00:13<00:05, 21.5MB/s]     72%|#######2  | 275M/380M [00:13<00:05, 21.2MB/s]     73%|#######3  | 278M/380M [00:14<00:04, 21.6MB/s]     74%|#######3  | 281M/380M [00:14<00:04, 21.8MB/s]     75%|#######4  | 284M/380M [00:14<00:04, 22.1MB/s]     75%|#######5  | 287M/380M [00:14<00:04, 22.2MB/s]     76%|#######6  | 290M/380M [00:14<00:04, 22.2MB/s]     77%|#######6  | 293M/380M [00:14<00:04, 22.0MB/s]     78%|#######7  | 295M/380M [00:14<00:04, 22.0MB/s]     78%|#######8  | 298M/380M [00:15<00:03, 21.6MB/s]     79%|#######9  | 301M/380M [00:15<00:03, 21.8MB/s]     80%|#######9  | 304M/380M [00:15<00:03, 22.0MB/s]     81%|########  | 307M/380M [00:15<00:03, 22.1MB/s]     81%|########1 | 309M/380M [00:15<00:03, 21.5MB/s]     82%|########2 | 312M/380M [00:15<00:03, 21.8MB/s]     83%|########2 | 315M/380M [00:15<00:03, 22.1MB/s]     84%|########3 | 318M/380M [00:15<00:02, 22.0MB/s]     84%|########4 | 321M/380M [00:16<00:02, 22.1MB/s]     85%|########5 | 324M/380M [00:16<00:02, 22.1MB/s]     86%|########6 | 327M/380M [00:16<00:02, 22.1MB/s]     87%|########6 | 330M/380M [00:16<00:02, 22.3MB/s]     88%|########7 | 333M/380M [00:16<00:02, 22.4MB/s]     88%|########8 | 336M/380M [00:16<00:02, 22.3MB/s]     89%|########9 | 338M/380M [00:16<00:01, 22.3MB/s]     90%|########9 | 341M/380M [00:17<00:01, 22.2MB/s]     91%|######### | 344M/380M [00:17<00:01, 23.9MB/s]     91%|#########1| 347M/380M [00:17<00:01, 23.6MB/s]     92%|#########1| 349M/380M [00:17<00:01, 24.0MB/s]     92%|#########2| 351M/380M [00:17<00:01, 21.6MB/s]     93%|#########2| 353M/380M [00:17<00:01, 20.6MB/s]     94%|#########3| 356M/380M [00:17<00:01, 21.2MB/s]     94%|#########4| 359M/380M [00:17<00:01, 21.5MB/s]     95%|#########5| 362M/380M [00:18<00:00, 21.8MB/s]     96%|#########5| 365M/380M [00:18<00:00, 22.2MB/s]     97%|#########6| 368M/380M [00:18<00:00, 22.4MB/s]     98%|#########7| 371M/380M [00:18<00:00, 22.5MB/s]     98%|#########8| 373M/380M [00:18<00:00, 22.6MB/s]     99%|#########9| 376M/380M [00:18<00:00, 22.4MB/s]    100%|#########9| 379M/380M [00:18<00:00, 22.3MB/s]    100%|##########| 380M/380M [00:18<00:00, 21.1MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 53-54

We will process the image by tiling it in crops of shape ``chunks = (1000, 1000)``.

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: default

    sq.im.process(img, layer="image", method="gray", chunks=1000)








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Now we can look at the result on a cropped part of the image.

.. GENERATED FROM PYTHON SOURCE LINES 58-66

.. code-block:: default

    crop = img.crop_corner(4000, 4000, size=2000)

    fig, axes = plt.subplots(1, 2)
    crop.show("image", ax=axes[0])
    _ = axes[0].set_title("original")
    crop.show("image_gray", cmap="gray", ax=axes[1])
    _ = axes[1].set_title("grayscale")




.. image-sg:: /auto_examples/image/images/sphx_glr_compute_process_hires_001.png
   :alt: original, grayscale
   :srcset: /auto_examples/image/images/sphx_glr_compute_process_hires_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-74

Custom processing functions
+++++++++++++++++++++++++++
Here, we use a custom processing function (here :func:`scipy.ndimage.gaussian_filter`)
with chunking to showcase the ``depth`` and ``boundary`` arguments.

Lets use a simple image and choose the chunk size in such a way to clearly see the differences
between using overlapping crops and non-overlapping crops.

.. GENERATED FROM PYTHON SOURCE LINES 74-98

.. code-block:: default

    arr = np.zeros((20, 20))
    arr[10:] = 1
    img = sq.im.ImageContainer(arr, layer="image")

    # smooth the image using `depth` 0 and 1
    sq.im.process(
        img,
        layer="image",
        method=gaussian_filter,
        layer_added="smooth_depth0",
        chunks=10,
        sigma=1,
        apply_kwargs={"depth": 0},
    )
    sq.im.process(
        img,
        layer="image",
        method=gaussian_filter,
        layer_added="smooth_depth1",
        chunks=10,
        sigma=1,
        apply_kwargs={"depth": 1, "boundary": "reflect"},
    )








.. GENERATED FROM PYTHON SOURCE LINES 99-101

Plot the difference in results.
Using overlapping blocks with ``depth = 1`` removes the artifacts at the borders between chunks.

.. GENERATED FROM PYTHON SOURCE LINES 101-108

.. code-block:: default

    fig, axes = plt.subplots(1, 3)
    img.show("image", ax=axes[0])
    _ = axes[0].set_title("original")
    img.show("smooth_depth0", ax=axes[1])
    _ = axes[1].set_title("non-overlapping crops")
    img.show("smooth_depth1", ax=axes[2])
    _ = axes[2].set_title("overlapping crops")



.. image-sg:: /auto_examples/image/images/sphx_glr_compute_process_hires_002.png
   :alt: original, non-overlapping crops, overlapping crops
   :srcset: /auto_examples/image/images/sphx_glr_compute_process_hires_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  32.305 seconds)

**Estimated memory usage:**  2017 MB


.. _sphx_glr_download_auto_examples_image_compute_process_hires.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_process_hires.py <compute_process_hires.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_process_hires.ipynb <compute_process_hires.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
