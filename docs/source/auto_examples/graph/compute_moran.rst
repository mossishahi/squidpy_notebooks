
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/graph/compute_moran.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_graph_compute_moran.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_graph_compute_moran.py:


Compute Moran's I score
-----------------------

This example shows how to compute the Moran's I global spatial auto-correlation statistics.

The Moran's I global spatial auto-correlation statistics evaluates whether
features (i.e. genes) shows a pattern that is clustered, dispersed or random
in the tissue are under consideration.

.. seealso::

    - See :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` and
      :ref:`sphx_glr_auto_examples_graph_compute_ripley.py` for other scores to describe spatial patterns.
    - See :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for general usage of
      :func:`squidpy.gr.spatial_neighbors`.

.. GENERATED FROM PYTHON SOURCE LINES 19-24

.. code-block:: default

    import squidpy as sq

    adata = sq.datasets.visium_hne_adata()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/314M [00:00<?, ?B/s]      0%|          | 8.00k/314M [00:00<1:29:30, 61.3kB/s]      0%|          | 64.0k/314M [00:00<19:59, 275kB/s]         0%|          | 112k/314M [00:00<16:49, 326kB/s]       0%|          | 264k/314M [00:00<08:21, 656kB/s]      0%|          | 552k/314M [00:00<04:32, 1.21MB/s]      0%|          | 1.11M/314M [00:00<02:22, 2.30MB/s]      1%|          | 2.25M/314M [00:00<01:13, 4.43MB/s]      1%|1         | 4.52M/314M [00:01<00:37, 8.58MB/s]      2%|2         | 7.39M/314M [00:01<00:25, 12.8MB/s]      3%|3         | 10.2M/314M [00:01<00:20, 15.5MB/s]      4%|4         | 13.0M/314M [00:01<00:18, 17.4MB/s]      5%|5         | 15.9M/314M [00:01<00:16, 18.8MB/s]      6%|5         | 18.8M/314M [00:01<00:15, 19.8MB/s]      7%|6         | 21.6M/314M [00:01<00:15, 20.4MB/s]      8%|7         | 24.5M/314M [00:02<00:14, 21.0MB/s]      9%|8         | 27.5M/314M [00:02<00:13, 21.5MB/s]     10%|9         | 30.3M/314M [00:02<00:13, 21.6MB/s]     11%|#         | 33.2M/314M [00:02<00:13, 21.7MB/s]     11%|#1        | 36.0M/314M [00:02<00:13, 21.7MB/s]     12%|#2        | 38.9M/314M [00:02<00:13, 21.7MB/s]     13%|#3        | 41.8M/314M [00:02<00:13, 21.8MB/s]     14%|#4        | 44.6M/314M [00:02<00:12, 21.9MB/s]     15%|#5        | 47.5M/314M [00:03<00:12, 21.9MB/s]     16%|#6        | 50.3M/314M [00:03<00:12, 21.9MB/s]     17%|#6        | 53.1M/314M [00:03<00:12, 21.6MB/s]     18%|#7        | 56.0M/314M [00:03<00:12, 21.8MB/s]     19%|#8        | 58.9M/314M [00:03<00:12, 22.0MB/s]     20%|#9        | 61.8M/314M [00:03<00:11, 22.2MB/s]     21%|##        | 64.7M/314M [00:03<00:11, 22.2MB/s]     22%|##1       | 67.6M/314M [00:04<00:11, 22.2MB/s]     22%|##2       | 70.5M/314M [00:04<00:11, 22.2MB/s]     23%|##3       | 73.5M/314M [00:04<00:11, 22.4MB/s]     24%|##4       | 76.4M/314M [00:04<00:11, 22.4MB/s]     25%|##5       | 79.4M/314M [00:04<00:10, 22.5MB/s]     26%|##6       | 82.2M/314M [00:04<00:10, 22.2MB/s]     27%|##7       | 85.1M/314M [00:04<00:10, 22.2MB/s]     28%|##8       | 88.0M/314M [00:05<00:10, 22.3MB/s]     29%|##8       | 90.9M/314M [00:05<00:10, 22.3MB/s]     30%|##9       | 93.5M/314M [00:05<00:10, 21.7MB/s]     31%|###       | 96.5M/314M [00:05<00:10, 21.9MB/s]     32%|###1      | 99.4M/314M [00:05<00:09, 22.8MB/s]     32%|###2      | 102M/314M [00:05<00:09, 23.3MB/s]      33%|###3      | 104M/314M [00:05<00:09, 22.6MB/s]     34%|###3      | 106M/314M [00:05<00:10, 21.2MB/s]     34%|###4      | 108M/314M [00:05<00:10, 21.3MB/s]     35%|###5      | 111M/314M [00:06<00:08, 23.8MB/s]     36%|###5      | 113M/314M [00:06<00:09, 22.9MB/s]     36%|###6      | 114M/314M [00:06<00:10, 20.2MB/s]     37%|###7      | 117M/314M [00:06<00:09, 21.8MB/s]     38%|###8      | 120M/314M [00:06<00:08, 24.2MB/s]     39%|###8      | 121M/314M [00:06<00:09, 22.1MB/s]     39%|###9      | 123M/314M [00:06<00:09, 20.3MB/s]     40%|###9      | 126M/314M [00:06<00:08, 22.2MB/s]     41%|####      | 128M/314M [00:06<00:08, 23.4MB/s]     41%|####1     | 130M/314M [00:07<00:08, 22.4MB/s]     42%|####1     | 132M/314M [00:07<00:09, 20.7MB/s]     43%|####2     | 134M/314M [00:07<00:08, 22.4MB/s]     44%|####3     | 137M/314M [00:07<00:07, 23.6MB/s]     44%|####3     | 138M/314M [00:07<00:08, 20.8MB/s]     45%|####4     | 140M/314M [00:07<00:08, 20.4MB/s]     46%|####5     | 143M/314M [00:07<00:08, 21.7MB/s]     46%|####6     | 146M/314M [00:07<00:08, 21.9MB/s]     47%|####7     | 149M/314M [00:07<00:07, 22.1MB/s]     48%|####8     | 152M/314M [00:08<00:07, 22.1MB/s]     49%|####9     | 155M/314M [00:08<00:07, 22.3MB/s]     50%|#####     | 157M/314M [00:08<00:07, 22.2MB/s]     51%|#####1    | 160M/314M [00:08<00:07, 22.2MB/s]     52%|#####1    | 163M/314M [00:08<00:07, 22.2MB/s]     53%|#####2    | 166M/314M [00:08<00:07, 21.7MB/s]     54%|#####3    | 169M/314M [00:08<00:06, 21.9MB/s]     55%|#####4    | 172M/314M [00:08<00:06, 22.9MB/s]     55%|#####5    | 174M/314M [00:09<00:06, 22.9MB/s]     56%|#####5    | 176M/314M [00:09<00:06, 21.1MB/s]     57%|#####6    | 178M/314M [00:09<00:06, 21.4MB/s]     57%|#####7    | 180M/314M [00:09<00:06, 22.0MB/s]     58%|#####8    | 183M/314M [00:09<00:06, 21.8MB/s]     59%|#####9    | 186M/314M [00:09<00:06, 21.8MB/s]     60%|######    | 189M/314M [00:09<00:06, 21.7MB/s]     61%|######1   | 192M/314M [00:09<00:05, 21.6MB/s]     62%|######1   | 195M/314M [00:10<00:05, 21.8MB/s]     63%|######2   | 198M/314M [00:10<00:05, 22.0MB/s]     64%|######3   | 201M/314M [00:10<00:05, 22.3MB/s]     65%|######4   | 203M/314M [00:10<00:05, 22.2MB/s]     66%|######5   | 206M/314M [00:10<00:05, 22.3MB/s]     67%|######6   | 209M/314M [00:10<00:04, 24.3MB/s]     67%|######7   | 211M/314M [00:10<00:04, 23.2MB/s]     68%|######7   | 213M/314M [00:10<00:05, 21.1MB/s]     69%|######8   | 215M/314M [00:11<00:04, 21.8MB/s]     69%|######9   | 218M/314M [00:11<00:04, 20.6MB/s]     70%|#######   | 220M/314M [00:11<00:04, 21.2MB/s]     71%|#######1  | 223M/314M [00:11<00:04, 21.5MB/s]     72%|#######2  | 226M/314M [00:11<00:04, 21.8MB/s]     73%|#######2  | 229M/314M [00:11<00:04, 21.9MB/s]     74%|#######3  | 232M/314M [00:11<00:03, 22.1MB/s]     75%|#######4  | 235M/314M [00:12<00:03, 22.3MB/s]     76%|#######5  | 238M/314M [00:12<00:03, 22.1MB/s]     77%|#######6  | 241M/314M [00:12<00:03, 22.2MB/s]     78%|#######7  | 244M/314M [00:12<00:03, 23.9MB/s]     78%|#######8  | 246M/314M [00:12<00:02, 23.8MB/s]     79%|#######8  | 248M/314M [00:12<00:03, 21.1MB/s]     79%|#######9  | 250M/314M [00:12<00:03, 21.3MB/s]     80%|########  | 252M/314M [00:12<00:03, 21.0MB/s]     81%|########1 | 255M/314M [00:12<00:02, 21.4MB/s]     82%|########2 | 258M/314M [00:13<00:02, 21.8MB/s]     83%|########3 | 261M/314M [00:13<00:02, 22.6MB/s]     84%|########3 | 263M/314M [00:13<00:02, 23.1MB/s]     85%|########4 | 266M/314M [00:13<00:02, 23.2MB/s]     85%|########5 | 268M/314M [00:13<00:02, 21.0MB/s]     86%|########5 | 270M/314M [00:13<00:02, 21.7MB/s]     87%|########6 | 272M/314M [00:13<00:02, 20.3MB/s]     88%|########7 | 275M/314M [00:13<00:01, 21.1MB/s]     88%|########8 | 278M/314M [00:14<00:01, 21.7MB/s]     89%|########9 | 281M/314M [00:14<00:01, 21.3MB/s]     90%|######### | 283M/314M [00:14<00:01, 23.5MB/s]     91%|#########1| 286M/314M [00:14<00:01, 24.3MB/s]     92%|#########1| 287M/314M [00:14<00:01, 20.5MB/s]     92%|#########2| 290M/314M [00:14<00:01, 21.0MB/s]     93%|#########3| 293M/314M [00:14<00:01, 21.3MB/s]     94%|#########4| 296M/314M [00:14<00:00, 21.4MB/s]     95%|#########5| 299M/314M [00:15<00:00, 21.5MB/s]     96%|#########6| 302M/314M [00:15<00:00, 21.6MB/s]     97%|#########6| 304M/314M [00:15<00:00, 23.1MB/s]     98%|#########7| 307M/314M [00:15<00:00, 22.3MB/s]     99%|#########8| 310M/314M [00:15<00:00, 24.4MB/s]     99%|#########9| 312M/314M [00:15<00:00, 24.1MB/s]    100%|#########9| 313M/314M [00:15<00:00, 19.9MB/s]    100%|##########| 314M/314M [00:15<00:00, 20.9MB/s]

    AnnData object with n_obs × n_vars = 2688 × 18078
        obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_mt', 'log1p_total_counts_mt', 'pct_counts_mt', 'n_counts', 'leiden', 'cluster'
        var: 'gene_ids', 'feature_types', 'genome', 'mt', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'n_cells', 'highly_variable', 'highly_variable_rank', 'means', 'variances', 'variances_norm'
        uns: 'cluster_colors', 'hvg', 'leiden', 'leiden_colors', 'neighbors', 'pca', 'rank_genes_groups', 'spatial', 'umap'
        obsm: 'X_pca', 'X_umap', 'spatial'
        varm: 'PCs'
        obsp: 'connectivities', 'distances'



.. GENERATED FROM PYTHON SOURCE LINES 25-28

We can compute the Moran's I score with :func:`squidpy.gr.spatial_autocorr` and ``mode = 'moran'``.
We first need to compute a spatial graph with :func:`squidpy.gr.spatial_neighbors`.
We will also subset the number of genes to evaluate.

.. GENERATED FROM PYTHON SOURCE LINES 28-39

.. code-block:: default

    genes = adata[:, adata.var.highly_variable].var_names.values[:100]
    sq.gr.spatial_neighbors(adata)
    sq.gr.spatial_autocorr(
        adata,
        mode="moran",
        genes=genes,
        n_perms=100,
        n_jobs=1,
    )
    adata.uns["moranI"].head(10)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?/s]      2%|2         | 2/100 [00:00<00:05, 18.76/s]      7%|7         | 7/100 [00:00<00:02, 35.33/s]     12%|#2        | 12/100 [00:00<00:02, 41.03/s]     17%|#7        | 17/100 [00:00<00:01, 43.67/s]     22%|##2       | 22/100 [00:00<00:01, 45.01/s]     27%|##7       | 27/100 [00:00<00:01, 46.46/s]     32%|###2      | 32/100 [00:00<00:01, 47.47/s]     37%|###7      | 37/100 [00:00<00:01, 47.76/s]     42%|####2     | 42/100 [00:00<00:01, 47.69/s]     47%|####6     | 47/100 [00:01<00:01, 48.24/s]     53%|#####3    | 53/100 [00:01<00:00, 48.96/s]     59%|#####8    | 59/100 [00:01<00:00, 49.48/s]     64%|######4   | 64/100 [00:01<00:00, 49.56/s]     69%|######9   | 69/100 [00:01<00:00, 49.31/s]     74%|#######4  | 74/100 [00:01<00:00, 49.35/s]     79%|#######9  | 79/100 [00:01<00:00, 49.24/s]     84%|########4 | 84/100 [00:01<00:00, 49.41/s]     89%|########9 | 89/100 [00:01<00:00, 48.80/s]     94%|#########3| 94/100 [00:02<00:00, 47.26/s]     99%|#########9| 99/100 [00:02<00:00, 47.29/s]    100%|##########| 100/100 [00:02<00:00, 46.90/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_norm</th>
          <th>var_norm</th>
          <th>pval_z_sim</th>
          <th>pval_sim</th>
          <th>var_sim</th>
          <th>pval_norm_fdr_bh</th>
          <th>pval_z_sim_fdr_bh</th>
          <th>pval_sim_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>3110035E14Rik</th>
          <td>0.665132</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000209</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>Resp18</th>
          <td>0.649582</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000305</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>1500015O10Rik</th>
          <td>0.605940</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000233</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>Ecel1</th>
          <td>0.570304</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000232</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>2010300C02Rik</th>
          <td>0.539469</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000198</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>Scg2</th>
          <td>0.476060</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000194</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>Ogfrl1</th>
          <td>0.457945</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000194</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>Itm2c</th>
          <td>0.451842</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000197</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>Tuba4a</th>
          <td>0.451810</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000198</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
        <tr>
          <th>Satb2</th>
          <td>0.429162</td>
          <td>0.0</td>
          <td>0.000131</td>
          <td>0.0</td>
          <td>0.009901</td>
          <td>0.000221</td>
          <td>0.0</td>
          <td>0.0</td>
          <td>0.011929</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 40-41

We can visualize some of those genes with :func:`squidpy.pl.spatial_scatter`.

.. GENERATED FROM PYTHON SOURCE LINES 41-43

.. code-block:: default

    sq.pl.spatial_scatter(adata, color=["Resp18", "Tuba4a"])




.. image-sg:: /auto_examples/graph/images/sphx_glr_compute_moran_001.png
   :alt: Resp18, Tuba4a
   :srcset: /auto_examples/graph/images/sphx_glr_compute_moran_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-46

We could've also passed ``mode = 'geary'`` to compute a closely related auto-correlation statistic, `Geary's C
<https://en.wikipedia.org/wiki/Geary%27s_C>`_. See :func:`squidpy.gr.spatial_autocorr` for more information.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  39.128 seconds)

**Estimated memory usage:**  580 MB


.. _sphx_glr_download_auto_examples_graph_compute_moran.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_moran.py <compute_moran.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_moran.ipynb <compute_moran.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
